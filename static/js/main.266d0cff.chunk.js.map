{"version":3,"sources":["components/CardElement.js","components/GameBoard.js","components/GameOver.js","game/game.js","MemoryGame.js","reportWebVitals.js","index.js"],"names":["CardElement","props","react_default","a","createElement","onClick","handleFlip","card","id","className","concat","flipped","src","icon","alt","GameBoard","cards","map","index","key","GameOver","show","handleRestart","Fragment","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","console","log","checkMatch","clearCards","unflipCards","checkGameOver","length","createCardFromTechs","_this","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","_ref","flipCard","cardID","gameOverCallback","noMatchCallback","_this2","setTimeout","MemoryGame","_useState","useState","_useState2","Object","slicedToArray","gameOver","setGameOver","_useState3","_useState4","setCards","useEffect","toConsumableArray","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.266d0cff.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function CardElement(props) {\r\n\treturn (\r\n\t\t<div\r\n\t\t\tonClick={() => {\r\n\t\t\t\tprops.handleFlip(props.card);\r\n\t\t\t}}\r\n\t\t\tid={props.card.id}\r\n\t\t\tclassName={`card ${props.card.flipped ? \"flip\" : \"\"}`}>\r\n\t\t\t<div className=\"cardFront\">\r\n\t\t\t\t<img className=\"icon\" src={`assets/Imagens/${props.card.icon}.png`} alt={props.card.icon}></img>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"cardBack\">{\"</>\"}</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\nimport CardElement from \"./CardElement\";\r\n\r\nexport default function GameBoard(props) {\r\n\treturn (\r\n\t\t<div id=\"gameBoard\">\r\n\t\t\t{props.cards.map((card, index) => (\r\n\t\t\t\t<CardElement handleFlip={props.handleFlip} key={index} card={card}></CardElement>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function GameOver(props) {\r\n\treturn props.show ? (\r\n\t\t<div id=\"gameOver\">\r\n\t\t\t<div>PARABÃ‰NS ZEUUUU, TE AMO!</div>\r\n\t\t\t<button id=\"restart\" onClick={props.handleRestart}>\r\n\t\t\t\tRESTART\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t) : (\r\n\t\t<></>\r\n\t);\r\n}\r\n","let game = {\r\n\tlockMode: false,\r\n\tfirstCard: null,\r\n\tsecondCard: null,\r\n\r\n\ttechs: [\r\n\t\t\"bootstrap\", //\r\n\t\t\"css\",\r\n\t\t\"electron\",\r\n\t\t\"firebase\",\r\n\t\t\"html\",\r\n\t\t\"javascript\",\r\n\t\t\"jquery\",\r\n\t\t\"mongo\",\r\n\t\t\"node\",\r\n\t\t\"react\",\r\n\t],\r\n\r\n\tcards: null,\r\n\r\n\t/*SELECIONA CARTAS PARA SEREM VIRADAS E CHECADAS*/\r\n\tsetCard: function (id) {\r\n\t\tlet card = this.cards.filter((card) => card.id === id)[0];\r\n\t\tconsole.log(card);\r\n\r\n\t\tif (card.flipped || this.lockMode) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (!this.firstCard) {\r\n\t\t\tthis.firstCard = card;\r\n\t\t\tthis.firstCard.flipped = true;\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\tthis.secondCard = card;\r\n\t\t\tthis.secondCard.flipped = true;\r\n\t\t\tthis.lockMode = true;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t},\r\n\r\n\tcheckMatch: function () {\r\n\t\tif (!this.firstCard || !this.secondCard) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\treturn this.firstCard.icon === this.secondCard.icon;\r\n\t},\r\n\t/*LIMPA AS CARTAS QUE FORAM SELECIONADAS A CIMA, RETORNA PARA NULL O firstCard e secondCard E LIBERA O LOCKMODE*/\r\n\tclearCards: function () {\r\n\t\tthis.firstCard = null;\r\n\t\tthis.secondCard = null;\r\n\t\tthis.lockMode = false;\r\n\t},\r\n\r\n\tunflipCards() {\r\n\t\tthis.firstCard.flipped = false;\r\n\t\tthis.secondCard.flipped = false;\r\n\t\tthis.clearCards();\r\n\t},\r\n\r\n\tcheckGameOver() {\r\n\t\treturn this.cards.filter((card) => !card.flipped).length === 0;\r\n\t},\r\n\r\n\tcreateCardFromTechs: function () {\r\n\t\tthis.cards = [];\r\n\t\t/*da pra usar: for(let tech of techs)*/\r\n\t\tthis.techs.forEach((tech) => {\r\n\t\t\tthis.cards.push(this.createPairFromTech(tech));\r\n\t\t});\r\n\r\n\t\tthis.cards = this.cards.flatMap((pair) => pair);\r\n\t\tthis.shuffleCards();\r\n\t\treturn this.cards;\r\n\t},\r\n\r\n\tcreatePairFromTech: function (tech) {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\tid: this.createIdWithTech(tech),\r\n\t\t\t\ticon: tech,\r\n\t\t\t\tflipped: false,\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tid: this.createIdWithTech(tech),\r\n\t\t\t\ticon: tech,\r\n\t\t\t\tflipped: false,\r\n\t\t\t},\r\n\t\t];\r\n\t},\r\n\r\n\tcreateIdWithTech: function (tech) {\r\n\t\treturn tech + parseInt(Math.random() * 1000);\r\n\t},\r\n\r\n\tshuffleCards: function (cards) {\r\n\t\tlet currentIndex = this.cards.length;\r\n\t\tlet randomIndex = 0;\r\n\r\n\t\twhile (currentIndex !== 0) {\r\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\r\n\t\t\tcurrentIndex--;\r\n\r\n\t\t\t[this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]];\r\n\t\t}\r\n\t},\r\n\r\n\tflipCard: function (cardID, gameOverCallback, noMatchCallback) {\r\n\t\tif (this.setCard(cardID)) {\r\n\t\t\tif (this.secondCard) {\r\n\t\t\t\tif (this.checkMatch()) {\r\n\t\t\t\t\tthis.clearCards();\r\n\t\t\t\t\tif (this.checkGameOver()) {\r\n\t\t\t\t\t\t//GAME OVER\r\n\t\t\t\t\t\tgameOverCallback();\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\t\t//NO MATCH\r\n\t\t\t\t\t\tthis.unflipCards();\r\n\t\t\t\t\t\tnoMatchCallback();\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n};\r\n\r\nexport default game;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport GameBoard from \"./components/GameBoard\";\r\nimport GameOver from \"./components/GameOver\";\r\nimport game from \"./game/game\";\r\n\r\nexport default function MemoryGame() {\r\n\tconst [gameOver, setGameOver] = useState(false);\r\n\tconst [cards, setCards] = useState([]);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetCards(game.createCardFromTechs());\r\n\t}, []);\r\n\r\n\tfunction restart() {\r\n\t\tgame.clearCards();\r\n\t\tsetCards(game.createCardFromTechs());\r\n\t\tsetGameOver(false);\r\n\t}\r\n\r\n\tfunction handleFlip(card) {\r\n\t\tgame.flipCard(\r\n\t\t\tcard.id,\r\n\t\t\t() => {\r\n\t\t\t\t//gameOverCallback\r\n\t\t\t\tsetGameOver(true);\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\t//noMatchCallback\r\n\t\t\t\tsetCards([...game.cards]);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tsetCards([...game.cards]);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\r\n\t\t\t<GameOver show={gameOver} handleRestart={restart}></GameOver>\r\n\t\t</div>\r\n\t);\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport MemoryGame from \"./MemoryGame\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n\t<React.StrictMode>\n\t\t<MemoryGame />\n\t</React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}